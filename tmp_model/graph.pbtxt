node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 105
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 105
          }
        }
        string_val: "./data\\train\\10043504830011533633946092-0.wav"
        string_val: "./data\\train\\10043504830011533633946092-1.wav"
        string_val: "./data\\train\\10043504830011533633946092-2.wav"
        string_val: "./data\\train\\10043504830021533697756254-0.wav"
        string_val: "./data\\train\\10043504830021533697756254-1.wav"
        string_val: "./data\\train\\10043504830021533697756254-2.wav"
        string_val: "./data\\train\\10043504830031533635708232-0.wav"
        string_val: "./data\\train\\10043504830031533635708232-1.wav"
        string_val: "./data\\train\\10043504830031533635708232-2.wav"
        string_val: "./data\\train\\10043504830041533637119357-0.wav"
        string_val: "./data\\train\\10043504830041533637119357-1.wav"
        string_val: "./data\\train\\10043504830041533637119357-2.wav"
        string_val: "./data\\train\\10043504830051533697896189-0.wav"
        string_val: "./data\\train\\10043504830051533697896189-1.wav"
        string_val: "./data\\train\\10043504830051533697896189-2.wav"
        string_val: "./data\\train\\10043504830081533698237085-0.wav"
        string_val: "./data\\train\\10043504830081533698237085-1.wav"
        string_val: "./data\\train\\10043504830081533698237085-2.wav"
        string_val: "./data\\train\\10043504830081533785276331-0.wav"
        string_val: "./data\\train\\10043504830081533785276331-1.wav"
        string_val: "./data\\train\\10043504830081533785276331-2.wav"
        string_val: "./data\\train\\10043504830091533698082093-0.wav"
        string_val: "./data\\train\\10043504830091533698082093-1.wav"
        string_val: "./data\\train\\10043504830091533698082093-2.wav"
        string_val: "./data\\train\\10043524311341533542754847-0.wav"
        string_val: "./data\\train\\10043524311341533542754847-1.wav"
        string_val: "./data\\train\\10043524311341533542754847-2.wav"
        string_val: "./data\\train\\10043524311371533542446162-0.wav"
        string_val: "./data\\train\\10043524311371533542446162-1.wav"
        string_val: "./data\\train\\10043524311371533542446162-2.wav"
        string_val: "./data\\train\\10043524311441533544717976-0.wav"
        string_val: "./data\\train\\10043524311441533544717976-1.wav"
        string_val: "./data\\train\\10043524311441533544717976-2.wav"
        string_val: "./data\\train\\121624931534904112937-0.wav"
        string_val: "./data\\train\\121624931534904112937-1.wav"
        string_val: "./data\\train\\121624931534904112937-2.wav"
        string_val: "./data\\train\\121624961534918358067-0.wav"
        string_val: "./data\\train\\121624961534918358067-1.wav"
        string_val: "./data\\train\\121624961534918358067-2.wav"
        string_val: "./data\\train\\141280011535681514293-0.wav"
        string_val: "./data\\train\\141280011535681514293-1.wav"
        string_val: "./data\\train\\141280011535681514293-2.wav"
        string_val: "./data\\train\\141280011535682173218-0.wav"
        string_val: "./data\\train\\141280011535682173218-1.wav"
        string_val: "./data\\train\\141280011535682173218-2.wav"
        string_val: "./data\\train\\141280021535682706063-0.wav"
        string_val: "./data\\train\\141280021535682706063-1.wav"
        string_val: "./data\\train\\141280021535682706063-2.wav"
        string_val: "./data\\train\\141280021535683539543-0.wav"
        string_val: "./data\\train\\141280021535683539543-1.wav"
        string_val: "./data\\train\\141280021535683539543-2.wav"
        string_val: "./data\\train\\141280031535681842181-0.wav"
        string_val: "./data\\train\\141280031535681842181-1.wav"
        string_val: "./data\\train\\141280031535681842181-2.wav"
        string_val: "./data\\train\\142504821535081177750-0.wav"
        string_val: "./data\\train\\142504821535081177750-1.wav"
        string_val: "./data\\train\\142504821535081177750-2.wav"
        string_val: "./data\\train\\142546811535006188038-0.wav"
        string_val: "./data\\train\\142546811535006188038-1.wav"
        string_val: "./data\\train\\142546811535006188038-2.wav"
        string_val: "./data\\train\\142546821535011943981-0.wav"
        string_val: "./data\\train\\142546821535011943981-1.wav"
        string_val: "./data\\train\\142546821535011943981-2.wav"
        string_val: "./data\\train\\142633511535006393316-0.wav"
        string_val: "./data\\train\\142633511535006393316-1.wav"
        string_val: "./data\\train\\142633511535006393316-2.wav"
        string_val: "./data\\train\\142633531534826683522-0.wav"
        string_val: "./data\\train\\142633531534826683522-1.wav"
        string_val: "./data\\train\\142633531534826683522-2.wav"
        string_val: "./data\\train\\142633541535013374992-0.wav"
        string_val: "./data\\train\\142633541535013374992-1.wav"
        string_val: "./data\\train\\142633541535013374992-2.wav"
        string_val: "./data\\train\\142633581534822791380-0.wav"
        string_val: "./data\\train\\142633581534822791380-1.wav"
        string_val: "./data\\train\\142633581534822791380-2.wav"
        string_val: "./data\\train\\142722411535099445220-0.wav"
        string_val: "./data\\train\\142722411535099445220-1.wav"
        string_val: "./data\\train\\142722411535099445220-2.wav"
        string_val: "./data\\train\\142722411535103106782-0.wav"
        string_val: "./data\\train\\142722411535103106782-1.wav"
        string_val: "./data\\train\\142722411535103106782-2.wav"
        string_val: "./data\\train\\142722411535104500887-0.wav"
        string_val: "./data\\train\\142722411535104500887-1.wav"
        string_val: "./data\\train\\142722411535104500887-2.wav"
        string_val: "./data\\train\\142722441535100329154-0.wav"
        string_val: "./data\\train\\142722441535100329154-1.wav"
        string_val: "./data\\train\\142722441535100329154-2.wav"
        string_val: "./data\\train\\142722481535102393907-0.wav"
        string_val: "./data\\train\\142722481535102393907-1.wav"
        string_val: "./data\\train\\142722481535102393907-2.wav"
        string_val: "./data\\train\\142722491535105193603-0.wav"
        string_val: "./data\\train\\142722491535105193603-1.wav"
        string_val: "./data\\train\\142722491535105193603-2.wav"
        string_val: "./data\\train\\143026681535682204227-0.wav"
        string_val: "./data\\train\\143026681535682204227-1.wav"
        string_val: "./data\\train\\143026681535682204227-2.wav"
        string_val: "./data\\train\\143311731535167505926-0.wav"
        string_val: "./data\\train\\143311731535167505926-1.wav"
        string_val: "./data\\train\\143311731535167505926-2.wav"
        string_val: "./data\\train\\143311741535167045712-0.wav"
        string_val: "./data\\train\\143311741535167045712-1.wav"
        string_val: "./data\\train\\143311741535167045712-2.wav"
        string_val: "./data\\train\\143730491535534499818-0.wav"
        string_val: "./data\\train\\143730491535534499818-1.wav"
        string_val: "./data\\train\\143730491535534499818-2.wav"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 105
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 105
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\002\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\005\000\000\000\005\000\000\000\006\000\000\000\006\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\r\000\000\000\r\000\000\000\r
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_YFkPxI1OsjA"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_FLOAT
        type: DT_INT32
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000(\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21081851422786713
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21081851422786713
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/max"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/mul"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 40
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel"
  input: "model/encoder/block_1/conv1d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias"
  input: "model/encoder/block_1/conv1d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "model/encoder/block_1/conv1d/kernel/read"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/Conv2D"
  op: "Conv2D"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/conv1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_1/conv1d/conv1d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/BiasAdd"
  op: "BiasAdd"
  input: "model/encoder/block_1/conv1d/conv1d/Squeeze"
  input: "model/encoder/block_1/conv1d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma"
  input: "model/encoder/block_1/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta"
  input: "model/encoder/block_1/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  input: "model/encoder/block_1/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  input: "model/encoder/block_1/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/mean"
  op: "Mean"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "model/encoder/block_1/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "model/encoder/block_1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "model/encoder/block_1/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/variance"
  op: "Mean"
  input: "model/encoder/block_1/batch_normalization/moments/SquaredDifference"
  input: "model/encoder/block_1/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "model/encoder/block_1/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "model/encoder/block_1/batch_normalization/moving_mean/read"
  input: "model/encoder/block_1/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg/sub"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "model/encoder/block_1/batch_normalization/moving_variance/read"
  input: "model/encoder/block_1/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/sub"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  input: "model/encoder/block_1/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/add"
  op: "Add"
  input: "model/encoder/block_1/batch_normalization/moments/Squeeze_1"
  input: "model/encoder/block_1/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "model/encoder/block_1/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "model/encoder/block_1/batch_normalization/batchnorm/Rsqrt"
  input: "model/encoder/block_1/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "model/encoder/block_1/batch_normalization/moments/Squeeze"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "model/encoder/block_1/batch_normalization/beta/read"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul_1"
  input: "model/encoder/block_1/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/Relu"
  op: "Relu"
  input: "model/encoder/block_1/batch_normalization/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/max_pooling1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/max_pooling1d/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/block_1/Relu"
  input: "model/encoder/block_1/max_pooling1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/max_pooling1d/MaxPool"
  op: "MaxPool"
  input: "model/encoder/block_1/max_pooling1d/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_1/max_pooling1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_1/max_pooling1d/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4472135901451111
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4472135901451111
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/max"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/mul"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel"
  input: "model/encoder/block_2/conv1d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias"
  input: "model/encoder/block_2/conv1d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/block_1/max_pooling1d/Squeeze"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "model/encoder/block_2/conv1d/kernel/read"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/Conv2D"
  op: "Conv2D"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/conv1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_2/conv1d/conv1d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/BiasAdd"
  op: "BiasAdd"
  input: "model/encoder/block_2/conv1d/conv1d/Squeeze"
  input: "model/encoder/block_2/conv1d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma"
  input: "model/encoder/block_2/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta"
  input: "model/encoder/block_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  input: "model/encoder/block_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  input: "model/encoder/block_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/mean"
  op: "Mean"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "model/encoder/block_2/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "model/encoder/block_2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "model/encoder/block_2/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/variance"
  op: "Mean"
  input: "model/encoder/block_2/batch_normalization/moments/SquaredDifference"
  input: "model/encoder/block_2/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "model/encoder/block_2/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "model/encoder/block_2/batch_normalization/moving_mean/read"
  input: "model/encoder/block_2/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg/sub"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "model/encoder/block_2/batch_normalization/moving_variance/read"
  input: "model/encoder/block_2/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/sub"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  input: "model/encoder/block_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/add"
  op: "Add"
  input: "model/encoder/block_2/batch_normalization/moments/Squeeze_1"
  input: "model/encoder/block_2/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "model/encoder/block_2/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "model/encoder/block_2/batch_normalization/batchnorm/Rsqrt"
  input: "model/encoder/block_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "model/encoder/block_2/batch_normalization/moments/Squeeze"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "model/encoder/block_2/batch_normalization/beta/read"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul_1"
  input: "model/encoder/block_2/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/Relu"
  op: "Relu"
  input: "model/encoder/block_2/batch_normalization/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/max_pooling1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/max_pooling1d/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/block_2/Relu"
  input: "model/encoder/block_2/max_pooling1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/max_pooling1d/MaxPool"
  op: "MaxPool"
  input: "model/encoder/block_2/max_pooling1d/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_2/max_pooling1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_2/max_pooling1d/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.4472135901451111
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4472135901451111
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/max"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/RandomUniform"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform"
  op: "Add"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/mul"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel"
  input: "model/encoder/block_3/conv1d/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias"
  input: "model/encoder/block_3/conv1d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/block_2/max_pooling1d/Squeeze"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1"
  op: "ExpandDims"
  input: "model/encoder/block_3/conv1d/kernel/read"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/Conv2D"
  op: "Conv2D"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/conv1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_3/conv1d/conv1d/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/BiasAdd"
  op: "BiasAdd"
  input: "model/encoder/block_3/conv1d/conv1d/Squeeze"
  input: "model/encoder/block_3/conv1d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma"
  input: "model/encoder/block_3/batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta"
  input: "model/encoder/block_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  input: "model/encoder/block_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  input: "model/encoder/block_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/mean"
  op: "Mean"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "model/encoder/block_3/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "model/encoder/block_3/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "model/encoder/block_3/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/variance"
  op: "Mean"
  input: "model/encoder/block_3/batch_normalization/moments/SquaredDifference"
  input: "model/encoder/block_3/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_3/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "model/encoder/block_3/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "model/encoder/block_3/batch_normalization/moving_mean/read"
  input: "model/encoder/block_3/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg/sub"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "model/encoder/block_3/batch_normalization/moving_variance/read"
  input: "model/encoder/block_3/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/sub"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  input: "model/encoder/block_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/add"
  op: "Add"
  input: "model/encoder/block_3/batch_normalization/moments/Squeeze_1"
  input: "model/encoder/block_3/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "model/encoder/block_3/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "model/encoder/block_3/batch_normalization/batchnorm/Rsqrt"
  input: "model/encoder/block_3/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "model/encoder/block_3/batch_normalization/moments/Squeeze"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "model/encoder/block_3/batch_normalization/beta/read"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul_1"
  input: "model/encoder/block_3/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/Relu"
  op: "Relu"
  input: "model/encoder/block_3/batch_normalization/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/max_pooling1d/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/max_pooling1d/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/block_3/Relu"
  input: "model/encoder/block_3/max_pooling1d/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/max_pooling1d/MaxPool"
  op: "MaxPool"
  input: "model/encoder/block_3/max_pooling1d/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/block_3/max_pooling1d/Squeeze"
  op: "Squeeze"
  input: "model/encoder/block_3/max_pooling1d/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Assign"
  op: "Assign"
  input: "model/encoder/attention/hidden"
  input: "model/encoder/attention/hidden/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/attention/hidden/read"
  op: "Identity"
  input: "model/encoder/attention/hidden"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tanh"
  op: "Tanh"
  input: "model/encoder/block_3/max_pooling1d/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/transpose/perm"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/transpose"
  op: "Transpose"
  input: "model/encoder/attention/hidden/read"
  input: "model/encoder/attention/Tensordot/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Reshape"
  op: "Reshape"
  input: "model/encoder/attention/Tensordot/transpose"
  input: "model/encoder/attention/Tensordot/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Shape"
  op: "Shape"
  input: "model/encoder/attention/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/axes"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GreaterEqual"
  op: "GreaterEqual"
  input: "model/encoder/attention/Tensordot/axes"
  input: "model/encoder/attention/Tensordot/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Cast"
  op: "Cast"
  input: "model/encoder/attention/Tensordot/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/mul"
  op: "Mul"
  input: "model/encoder/attention/Tensordot/Cast"
  input: "model/encoder/attention/Tensordot/axes"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Less/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Less"
  op: "Less"
  input: "model/encoder/attention/Tensordot/axes"
  input: "model/encoder/attention/Tensordot/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Cast_1"
  op: "Cast"
  input: "model/encoder/attention/Tensordot/Less"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/add"
  op: "Add"
  input: "model/encoder/attention/Tensordot/axes"
  input: "model/encoder/attention/Tensordot/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/mul_1"
  op: "Mul"
  input: "model/encoder/attention/Tensordot/Cast_1"
  input: "model/encoder/attention/Tensordot/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/add_1"
  op: "Add"
  input: "model/encoder/attention/Tensordot/mul"
  input: "model/encoder/attention/Tensordot/mul_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/range"
  op: "Range"
  input: "model/encoder/attention/Tensordot/range/start"
  input: "model/encoder/attention/Tensordot/Rank"
  input: "model/encoder/attention/Tensordot/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/ListDiff"
  op: "ListDiff"
  input: "model/encoder/attention/Tensordot/range"
  input: "model/encoder/attention/Tensordot/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GatherV2"
  op: "GatherV2"
  input: "model/encoder/attention/Tensordot/Shape"
  input: "model/encoder/attention/Tensordot/ListDiff"
  input: "model/encoder/attention/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "model/encoder/attention/Tensordot/Shape"
  input: "model/encoder/attention/Tensordot/add_1"
  input: "model/encoder/attention/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Prod"
  op: "Prod"
  input: "model/encoder/attention/Tensordot/GatherV2"
  input: "model/encoder/attention/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Prod_1"
  op: "Prod"
  input: "model/encoder/attention/Tensordot/GatherV2_1"
  input: "model/encoder/attention/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat"
  op: "ConcatV2"
  input: "model/encoder/attention/Tensordot/GatherV2_1"
  input: "model/encoder/attention/Tensordot/GatherV2"
  input: "model/encoder/attention/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat_1"
  op: "ConcatV2"
  input: "model/encoder/attention/Tensordot/add_1"
  input: "model/encoder/attention/Tensordot/ListDiff"
  input: "model/encoder/attention/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/stack"
  op: "Pack"
  input: "model/encoder/attention/Tensordot/Prod_1"
  input: "model/encoder/attention/Tensordot/Prod"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/transpose_1"
  op: "Transpose"
  input: "model/encoder/attention/Tanh"
  input: "model/encoder/attention/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Reshape_1"
  op: "Reshape"
  input: "model/encoder/attention/Tensordot/transpose_1"
  input: "model/encoder/attention/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/MatMul"
  op: "MatMul"
  input: "model/encoder/attention/Tensordot/Reshape"
  input: "model/encoder/attention/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot/concat_2"
  op: "ConcatV2"
  input: "model/encoder/attention/Tensordot/Const_2"
  input: "model/encoder/attention/Tensordot/GatherV2"
  input: "model/encoder/attention/Tensordot/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Tensordot"
  op: "Reshape"
  input: "model/encoder/attention/Tensordot/MatMul"
  input: "model/encoder/attention/Tensordot/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Softmax"
  op: "Softmax"
  input: "model/encoder/attention/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "model/encoder/attention/ExpandDims"
  op: "ExpandDims"
  input: "model/encoder/attention/Softmax"
  input: "model/encoder/attention/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/mul"
  op: "Mul"
  input: "model/encoder/attention/ExpandDims"
  input: "model/encoder/attention/hidden/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "model/encoder/attention/Sum"
  op: "Sum"
  input: "model/encoder/attention/mul"
  input: "model/encoder/attention/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.21239769458770752
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.21239769458770752
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/max"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/mul"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel"
  input: "model/encoder/output_transformer/dense/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias"
  input: "model/encoder/output_transformer/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/MatMul"
  op: "MatMul"
  input: "model/encoder/attention/Sum"
  input: "model/encoder/output_transformer/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/BiasAdd"
  op: "BiasAdd"
  input: "model/encoder/output_transformer/dense/MatMul"
  input: "model/encoder/output_transformer/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "norm/mul"
  op: "Mul"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "norm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "norm/Sum"
  op: "Sum"
  input: "norm/mul"
  input: "norm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "norm/Sqrt"
  op: "Sqrt"
  input: "norm/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "norm/Squeeze"
  op: "Squeeze"
  input: "norm/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "norm/Squeeze"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "embedding_mean_norm/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "embedding_mean_norm"
      }
    }
  }
}
node {
  name: "embedding_mean_norm"
  op: "ScalarSummary"
  input: "embedding_mean_norm/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "transpose/Rank"
  op: "Rank"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "transpose/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transpose/sub"
  op: "Sub"
  input: "transpose/Rank"
  input: "transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "transpose/Range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "transpose/Range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "transpose/Range"
  op: "Range"
  input: "transpose/Range/start"
  input: "transpose/Rank"
  input: "transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "transpose/sub_1"
  op: "Sub"
  input: "transpose/sub"
  input: "transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "transpose"
  op: "Transpose"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  input: "transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "MatMul"
  op: "MatMul"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "DiagPart"
  op: "DiagPart"
  input: "MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "DiagPart"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "mul/x"
  input: "MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "ExpandDims"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ExpandDims_1"
  op: "ExpandDims"
  input: "DiagPart"
  input: "ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "sub"
  input: "ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "add"
  input: "Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "eye/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "eye/Minimum"
  op: "Minimum"
  input: "strided_slice"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "eye/concat/values_1"
  op: "Pack"
  input: "eye/Minimum"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "eye/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "eye/concat"
  op: "ConcatV2"
  input: "eye/shape"
  input: "eye/concat/values_1"
  input: "eye/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "eye/ones/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "eye/ones"
  op: "Fill"
  input: "eye/concat"
  input: "eye/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "eye/MatrixDiag"
  op: "MatrixDiag"
  input: "eye/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "eye/MatrixDiag"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "LogicalNot"
  op: "LogicalNot"
  input: "Cast_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ExpandDims_2"
  op: "ExpandDims"
  input: "Cast"
  input: "ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims_3/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims_3"
  op: "ExpandDims"
  input: "Cast"
  input: "ExpandDims_3/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ExpandDims_2"
  input: "ExpandDims_3"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "LogicalAnd"
  op: "LogicalAnd"
  input: "LogicalNot"
  input: "Equal"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat"
  op: "Cast"
  input: "LogicalAnd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Mul_1"
  op: "Mul"
  input: "ToFloat"
  input: "Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Max/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "Mul_1"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Max"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "hardest_positive_dist/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "hardest_positive_dist"
      }
    }
  }
}
node {
  name: "hardest_positive_dist"
  op: "ScalarSummary"
  input: "hardest_positive_dist/tags"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExpandDims_4/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ExpandDims_4"
  op: "ExpandDims"
  input: "Cast"
  input: "ExpandDims_4/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExpandDims_5/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ExpandDims_5"
  op: "ExpandDims"
  input: "Cast"
  input: "ExpandDims_5/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "ExpandDims_4"
  input: "ExpandDims_5"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "LogicalNot_1"
  op: "LogicalNot"
  input: "Equal_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ToFloat_1"
  op: "Cast"
  input: "LogicalNot_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Max_1/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Max_1"
  op: "Max"
  input: "Maximum"
  input: "Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "sub_1/x"
  input: "ToFloat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "Max_1"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "Maximum"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Min/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Min"
  op: "Min"
  input: "add_1"
  input: "Min/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "Min"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "hardest_negative_dist/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "hardest_negative_dist"
      }
    }
  }
}
node {
  name: "hardest_negative_dist"
  op: "ScalarSummary"
  input: "hardest_negative_dist/tags"
  input: "Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "sub_2"
  op: "Sub"
  input: "Max"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "sub_2"
  input: "add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Maximum_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Maximum_1"
  op: "Maximum"
  input: "add_2"
  input: "Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Mean_3"
  op: "Mean"
  input: "Maximum_1"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "metrics/mean/total/Assign"
  op: "Assign"
  input: "metrics/mean/total"
  input: "metrics/mean/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/mean/total/read"
  op: "Identity"
  input: "metrics/mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "metrics/mean/count/Assign"
  op: "Assign"
  input: "metrics/mean/count"
  input: "metrics/mean/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "metrics/mean/count/read"
  op: "Identity"
  input: "metrics/mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "metrics/mean/ToFloat"
  op: "Cast"
  input: "metrics/mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "metrics/mean/Sum"
  op: "Sum"
  input: "Mean"
  input: "metrics/mean/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/AssignAdd"
  op: "AssignAdd"
  input: "metrics/mean/total"
  input: "metrics/mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/AssignAdd_1"
  op: "AssignAdd"
  input: "metrics/mean/count"
  input: "metrics/mean/ToFloat"
  input: "^Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/mean/truediv"
  op: "RealDiv"
  input: "metrics/mean/total/read"
  input: "metrics/mean/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/Greater"
  op: "Greater"
  input: "metrics/mean/count/read"
  input: "metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/value"
  op: "Select"
  input: "metrics/mean/Greater"
  input: "metrics/mean/truediv"
  input: "metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/truediv_1"
  op: "RealDiv"
  input: "metrics/mean/AssignAdd"
  input: "metrics/mean/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/zeros_like_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "metrics/mean/Greater_1"
  op: "Greater"
  input: "metrics/mean/AssignAdd_1"
  input: "metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "metrics/mean/update_op"
  op: "Select"
  input: "metrics/mean/Greater_1"
  input: "metrics/mean/truediv_1"
  input: "metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Reshape/shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Shape"
  op: "Shape"
  input: "Maximum_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_3_grad/Reshape"
  input: "gradients/Mean_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Shape_1"
  op: "Shape"
  input: "Maximum_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Shape_2"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_3_grad/Shape_1"
  input: "gradients/Mean_3_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_3_grad/Shape_2"
  input: "gradients/Mean_3_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_3_grad/Prod_1"
  input: "gradients/Mean_3_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_3_grad/Prod"
  input: "gradients/Mean_3_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_3_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_3_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_3_grad/Tile"
  input: "gradients/Mean_3_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Shape"
  op: "Shape"
  input: "add_2"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/Mean_3_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/zeros/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/zeros"
  op: "Fill"
  input: "gradients/Maximum_1_grad/Shape_2"
  input: "gradients/Maximum_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "add_2"
  input: "Maximum_1/y"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Maximum_1_grad/Shape"
  input: "gradients/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Select"
  op: "Select"
  input: "gradients/Maximum_1_grad/GreaterEqual"
  input: "gradients/Mean_3_grad/truediv"
  input: "gradients/Maximum_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Select_1"
  op: "Select"
  input: "gradients/Maximum_1_grad/GreaterEqual"
  input: "gradients/Maximum_1_grad/zeros"
  input: "gradients/Mean_3_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_1_grad/Select"
  input: "gradients/Maximum_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Maximum_1_grad/Sum"
  input: "gradients/Maximum_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_1_grad/Select_1"
  input: "gradients/Maximum_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Maximum_1_grad/Sum_1"
  input: "gradients/Maximum_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Maximum_1_grad/Reshape"
  input: "^gradients/Maximum_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/Maximum_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Maximum_1_grad/Reshape"
  input: "^gradients/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Maximum_1_grad/Reshape_1"
  input: "^gradients/Maximum_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape"
  op: "Shape"
  input: "sub_2"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_2_grad/Shape"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_1_grad/tuple/control_dependency"
  input: "gradients/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum"
  input: "gradients/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_1_grad/tuple/control_dependency"
  input: "gradients/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum_1"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_2_grad/Reshape"
  input: "^gradients/add_2_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_2_grad/Reshape"
  input: "^gradients/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_2_grad/Reshape_1"
  input: "^gradients/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Shape"
  op: "Shape"
  input: "Max"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_2_grad/Shape_1"
  op: "Shape"
  input: "Min"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_2_grad/Shape"
  input: "gradients/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/add_2_grad/tuple/control_dependency"
  input: "gradients/sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_2_grad/Sum"
  input: "gradients/sub_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/add_2_grad/tuple/control_dependency"
  input: "gradients/sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_2_grad/Neg"
  input: "gradients/sub_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_2_grad/Reshape"
  input: "^gradients/sub_2_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_2_grad/Reshape"
  input: "^gradients/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_2_grad/Reshape_1"
  input: "^gradients/sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape"
  op: "Shape"
  input: "Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Max_grad/add"
  op: "Add"
  input: "Max/reduction_indices"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Max_grad/add"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range"
  op: "Range"
  input: "gradients/Max_grad/range/start"
  input: "gradients/Max_grad/Size"
  input: "gradients/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Max_grad/Shape_1"
  input: "gradients/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Max_grad/range"
  input: "gradients/Max_grad/mod"
  input: "gradients/Max_grad/Shape"
  input: "gradients/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape"
  op: "Reshape"
  input: "Max"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_2_grad/tuple/control_dependency"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Max_grad/Reshape"
  input: "Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Max_grad/Cast"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Max_grad/Sum"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/div"
  op: "RealDiv"
  input: "gradients/Max_grad/Cast"
  input: "gradients/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mul"
  op: "Mul"
  input: "gradients/Max_grad/div"
  input: "gradients/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Shape"
  op: "Shape"
  input: "add_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Min_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Min_grad/add"
  op: "Add"
  input: "Min/reduction_indices"
  input: "gradients/Min_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/mod"
  op: "FloorMod"
  input: "gradients/Min_grad/add"
  input: "gradients/Min_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Min_grad/range"
  op: "Range"
  input: "gradients/Min_grad/range/start"
  input: "gradients/Min_grad/Size"
  input: "gradients/Min_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Fill"
  op: "Fill"
  input: "gradients/Min_grad/Shape_1"
  input: "gradients/Min_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Min_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Min_grad/range"
  input: "gradients/Min_grad/mod"
  input: "gradients/Min_grad/Shape"
  input: "gradients/Min_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape"
  op: "Reshape"
  input: "Min"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_2_grad/tuple/control_dependency_1"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Equal"
  op: "Equal"
  input: "gradients/Min_grad/Reshape"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Cast"
  op: "Cast"
  input: "gradients/Min_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/Sum"
  op: "Sum"
  input: "gradients/Min_grad/Cast"
  input: "Min/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Min_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Min_grad/Sum"
  input: "gradients/Min_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/div"
  op: "RealDiv"
  input: "gradients/Min_grad/Cast"
  input: "gradients/Min_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Min_grad/mul"
  op: "Mul"
  input: "gradients/Min_grad/div"
  input: "gradients/Min_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Shape"
  op: "Shape"
  input: "ToFloat"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Shape_1"
  op: "Shape"
  input: "Maximum"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Mul_1_grad/Shape"
  input: "gradients/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/Max_grad/mul"
  input: "Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/Mul_1_grad/Mul"
  input: "gradients/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Mul_1_grad/Sum"
  input: "gradients/Mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "ToFloat"
  input: "gradients/Max_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/Mul_1_grad/Mul_1"
  input: "gradients/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Mul_1_grad/Sum_1"
  input: "gradients/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Mul_1_grad/Reshape"
  input: "^gradients/Mul_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Mul_1_grad/Reshape"
  input: "^gradients/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Mul_1_grad/Reshape_1"
  input: "^gradients/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape"
  op: "Shape"
  input: "Maximum"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape_1"
  op: "Shape"
  input: "mul_2"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_1_grad/Shape"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/Min_grad/mul"
  input: "gradients/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum"
  input: "gradients/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/Min_grad/mul"
  input: "gradients/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum_1"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_1_grad/Reshape"
  input: "^gradients/add_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_1_grad/Reshape"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_1_grad/Reshape_1"
  input: "^gradients/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape"
  op: "Shape"
  input: "Max_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape_1"
  op: "Shape"
  input: "sub_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_2_grad/Shape"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/add_1_grad/tuple/control_dependency_1"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/mul_2_grad/Mul"
  input: "gradients/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum"
  input: "gradients/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Mul_1"
  op: "Mul"
  input: "Max_1"
  input: "gradients/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_2_grad/Mul_1"
  input: "gradients/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum_1"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_2_grad/Reshape"
  input: "^gradients/mul_2_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_2_grad/Reshape"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_2_grad/Reshape_1"
  input: "^gradients/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Shape"
  op: "Shape"
  input: "Maximum"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_1_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/add"
  op: "Add"
  input: "Max_1/reduction_indices"
  input: "gradients/Max_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/mod"
  op: "FloorMod"
  input: "gradients/Max_1_grad/add"
  input: "gradients/Max_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/range"
  op: "Range"
  input: "gradients/Max_1_grad/range/start"
  input: "gradients/Max_1_grad/Size"
  input: "gradients/Max_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Fill"
  op: "Fill"
  input: "gradients/Max_1_grad/Shape_1"
  input: "gradients/Max_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Max_1_grad/range"
  input: "gradients/Max_1_grad/mod"
  input: "gradients/Max_1_grad/Shape"
  input: "gradients/Max_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Reshape"
  op: "Reshape"
  input: "Max_1"
  input: "gradients/Max_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_2_grad/tuple/control_dependency"
  input: "gradients/Max_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Equal"
  op: "Equal"
  input: "gradients/Max_1_grad/Reshape"
  input: "Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Cast"
  op: "Cast"
  input: "gradients/Max_1_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/Sum"
  op: "Sum"
  input: "gradients/Max_1_grad/Cast"
  input: "Max_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Max_1_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Max_1_grad/Sum"
  input: "gradients/Max_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/div"
  op: "RealDiv"
  input: "gradients/Max_1_grad/Cast"
  input: "gradients/Max_1_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_1_grad/mul"
  op: "Mul"
  input: "gradients/Max_1_grad/div"
  input: "gradients/Max_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/Mul_1_grad/tuple/control_dependency_1"
  input: "gradients/add_1_grad/tuple/control_dependency"
  input: "gradients/Max_1_grad/mul"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape"
  op: "Shape"
  input: "add"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/zeros/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/Maximum_grad/Shape_2"
  input: "gradients/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "add"
  input: "Maximum/y"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Maximum_grad/Shape"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Select"
  op: "Select"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/AddN"
  input: "gradients/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/Maximum_grad/zeros"
  input: "gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_grad/Select"
  input: "gradients/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum"
  input: "gradients/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_grad/Select_1"
  input: "gradients/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum_1"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Maximum_grad/Reshape"
  input: "^gradients/Maximum_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/Maximum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Maximum_grad/Reshape"
  input: "^gradients/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Maximum_grad/Reshape_1"
  input: "^gradients/Maximum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Maximum_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Shape"
  op: "Shape"
  input: "sub"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape_1"
  op: "Shape"
  input: "ExpandDims_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_grad/Shape"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_grad/tuple/control_dependency"
  input: "gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/Sum"
  input: "gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_grad/tuple/control_dependency"
  input: "gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_grad/Sum_1"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/add_grad/Reshape"
  input: "^gradients/add_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/add_grad/Reshape"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/add_grad/Reshape_1"
  input: "^gradients/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Shape"
  op: "Shape"
  input: "ExpandDims"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "mul"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_grad/Shape"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum"
  op: "Sum"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/Sum"
  input: "gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/add_grad/tuple/control_dependency"
  input: "gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Neg"
  op: "Neg"
  input: "gradients/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_grad/Neg"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/sub_grad/Reshape"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/sub_grad/Reshape_1"
  input: "^gradients/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ExpandDims_1_grad/Shape"
  op: "Shape"
  input: "DiagPart"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/tuple/control_dependency_1"
  input: "gradients/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/ExpandDims_grad/Shape"
  op: "Shape"
  input: "DiagPart"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/tuple/control_dependency"
  input: "gradients/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Shape_1"
  op: "Shape"
  input: "MatMul"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_grad/Shape"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul"
  op: "Mul"
  input: "gradients/sub_grad/tuple/control_dependency_1"
  input: "MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum"
  op: "Sum"
  input: "gradients/mul_grad/Mul"
  input: "gradients/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/Sum"
  input: "gradients/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1"
  op: "Mul"
  input: "mul/x"
  input: "gradients/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_grad/Mul_1"
  input: "gradients/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_grad/Sum_1"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/mul_grad/Reshape"
  input: "^gradients/mul_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/mul_grad/Reshape"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/mul_grad/Reshape_1"
  input: "^gradients/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/ExpandDims_1_grad/Reshape"
  input: "gradients/ExpandDims_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/ExpandDims_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/DiagPart_grad/Diag"
  op: "Diag"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/mul_grad/tuple/control_dependency_1"
  input: "gradients/DiagPart_grad/Diag"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/AddN_2"
  input: "transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "model/encoder/output_transformer/dense/BiasAdd"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/MatMul_grad/MatMul"
  input: "^gradients/MatMul_grad/MatMul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/MatMul_grad/MatMul"
  input: "^gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/MatMul_grad/MatMul_1"
  input: "^gradients/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "transpose/sub_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/MatMul_grad/tuple/control_dependency"
  input: "gradients/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
  input: "^gradients/model/encoder/output_transformer/dense/BiasAdd_grad/BiasAddGrad"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/output_transformer/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/control_dependency"
  input: "model/encoder/output_transformer/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "model/encoder/attention/Sum"
  input: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul"
  input: "^gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul"
  input: "^gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul_1"
  input: "^gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/output_transformer/dense/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Shape"
  op: "Shape"
  input: "model/encoder/attention/mul"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/add"
  op: "Add"
  input: "model/encoder/attention/Sum/reduction_indices"
  input: "gradients/model/encoder/attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/attention/Sum_grad/add"
  input: "gradients/model/encoder/attention/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/range"
  op: "Range"
  input: "gradients/model/encoder/attention/Sum_grad/range/start"
  input: "gradients/model/encoder/attention/Sum_grad/Size"
  input: "gradients/model/encoder/attention/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/attention/Sum_grad/Shape_1"
  input: "gradients/model/encoder/attention/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/attention/Sum_grad/range"
  input: "gradients/model/encoder/attention/Sum_grad/mod"
  input: "gradients/model/encoder/attention/Sum_grad/Shape"
  input: "gradients/model/encoder/attention/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/attention/Sum_grad/DynamicStitch"
  input: "gradients/model/encoder/attention/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/attention/Sum_grad/Shape"
  input: "gradients/model/encoder/attention/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/control_dependency"
  input: "gradients/model/encoder/attention/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/attention/Sum_grad/Reshape"
  input: "gradients/model/encoder/attention/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Shape"
  op: "Shape"
  input: "model/encoder/attention/ExpandDims"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/attention/mul_grad/Shape"
  input: "gradients/model/encoder/attention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/attention/Sum_grad/Tile"
  input: "model/encoder/attention/hidden/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/attention/mul_grad/Mul"
  input: "gradients/model/encoder/attention/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/mul_grad/Sum"
  input: "gradients/model/encoder/attention/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Mul_1"
  op: "Mul"
  input: "model/encoder/attention/ExpandDims"
  input: "gradients/model/encoder/attention/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/attention/mul_grad/Mul_1"
  input: "gradients/model/encoder/attention/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/attention/mul_grad/Sum_1"
  input: "gradients/model/encoder/attention/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/attention/mul_grad/Reshape"
  input: "^gradients/model/encoder/attention/mul_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/attention/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/attention/mul_grad/Reshape"
  input: "^gradients/model/encoder/attention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/attention/mul_grad/Reshape_1"
  input: "^gradients/model/encoder/attention/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/attention/Softmax"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/mul_grad/tuple/control_dependency"
  input: "gradients/model/encoder/attention/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/model/encoder/attention/ExpandDims_grad/Reshape"
  input: "model/encoder/attention/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/attention/Softmax_grad/mul"
  input: "gradients/model/encoder/attention/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/Reshape/shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/Softmax_grad/Sum"
  input: "gradients/model/encoder/attention/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/model/encoder/attention/ExpandDims_grad/Reshape"
  input: "gradients/model/encoder/attention/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/model/encoder/attention/Softmax_grad/sub"
  input: "model/encoder/attention/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot_grad/Shape"
  op: "Shape"
  input: "model/encoder/attention/Tensordot/MatMul"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/Softmax_grad/mul_1"
  input: "gradients/model/encoder/attention/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/model/encoder/attention/Tensordot_grad/Reshape"
  input: "model/encoder/attention/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "model/encoder/attention/Tensordot/Reshape"
  input: "gradients/model/encoder/attention/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul"
  input: "^gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul_1"
  input: "^gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/Reshape_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "gradients/model/encoder/attention/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/Reshape_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/attention/Tensordot/transpose_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/attention/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: -1
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "model/encoder/attention/Tensordot/transpose/perm"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/model/encoder/attention/Tensordot/Reshape_grad/Reshape"
  input: "gradients/model/encoder/attention/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "model/encoder/attention/Tensordot/concat_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/model/encoder/attention/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/model/encoder/attention/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/model/encoder/attention/mul_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/attention/Tensordot/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/attention/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/attention/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "model/encoder/attention/Tanh"
  input: "gradients/model/encoder/attention/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/max_pooling1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/max_pooling1d/MaxPool"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/max_pooling1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/attention/Tanh_grad/TanhGrad"
  input: "gradients/model/encoder/block_3/max_pooling1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 12
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "model/encoder/block_3/max_pooling1d/ExpandDims"
  input: "model/encoder/block_3/max_pooling1d/MaxPool"
  input: "gradients/model/encoder/block_3/max_pooling1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/max_pooling1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/Relu"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/max_pooling1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  input: "gradients/model/encoder/block_3/max_pooling1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/model/encoder/block_3/max_pooling1d/ExpandDims_grad/Reshape"
  input: "model/encoder/block_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_3/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_3/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_3/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_3/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_5"
  input: "model/encoder/block_3/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_5"
  input: "model/encoder/block_3/batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "model/encoder/block_3/batch_normalization/batchnorm/Rsqrt"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "model/encoder/block_3/batch_normalization/moments/variance/reduction_indices"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/add"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range/start"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Size"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/range"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/mod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_3/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_2"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Shape_3"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Prod_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Tile"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "model/encoder/block_3/batch_normalization/moments/StopGradient"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "model/encoder/block_3/batch_normalization/moments/mean/reduction_indices"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/add"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range/start"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Size"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/range"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/mod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Reshape"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_3/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_2"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Shape_3"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Prod_1"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Prod"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Tile"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_6"
  input: "^gradients/model/encoder/block_3/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_6"
  input: "^gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/conv1d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_3/conv1d/conv1d/Conv2D"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/ShapeN"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims_1"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "model/encoder/block_3/conv1d/conv1d/ExpandDims"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/ShapeN:1"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/max_pooling1d/Squeeze"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/max_pooling1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/max_pooling1d/MaxPool"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/max_pooling1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_grad/Reshape"
  input: "gradients/model/encoder/block_2/max_pooling1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "model/encoder/block_2/max_pooling1d/ExpandDims"
  input: "model/encoder/block_2/max_pooling1d/MaxPool"
  input: "gradients/model/encoder/block_2/max_pooling1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/max_pooling1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/Relu"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/max_pooling1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  input: "gradients/model/encoder/block_2/max_pooling1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/model/encoder/block_2/max_pooling1d/ExpandDims_grad/Reshape"
  input: "model/encoder/block_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_2/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_2/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_2/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_7"
  input: "model/encoder/block_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_7"
  input: "model/encoder/block_2/batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "model/encoder/block_2/batch_normalization/batchnorm/Rsqrt"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "model/encoder/block_2/batch_normalization/moments/variance/reduction_indices"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/add"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range/start"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Size"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/range"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/mod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_2/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_2"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Shape_3"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Prod_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Tile"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "model/encoder/block_2/batch_normalization/moments/StopGradient"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "model/encoder/block_2/batch_normalization/moments/mean/reduction_indices"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/add"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range/start"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Size"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/range"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/mod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Reshape"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_2/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_2"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Shape_3"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Prod_1"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Prod"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Tile"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_8"
  input: "^gradients/model/encoder/block_2/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_8"
  input: "^gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/conv1d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_2/conv1d/conv1d/Conv2D"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/ShapeN"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims_1"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "model/encoder/block_2/conv1d/conv1d/ExpandDims"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/ShapeN:1"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/max_pooling1d/Squeeze"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/max_pooling1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/max_pooling1d/MaxPool"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/max_pooling1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_grad/Reshape"
  input: "gradients/model/encoder/block_1/max_pooling1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 49
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "model/encoder/block_1/max_pooling1d/ExpandDims"
  input: "model/encoder/block_1/max_pooling1d/MaxPool"
  input: "gradients/model/encoder/block_1/max_pooling1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/max_pooling1d/ExpandDims_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/Relu"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/max_pooling1d/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/max_pooling1d/MaxPool_grad/MaxPoolGrad"
  input: "gradients/model/encoder/block_1/max_pooling1d/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/model/encoder/block_1/max_pooling1d/ExpandDims_grad/Reshape"
  input: "model/encoder/block_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_1/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_1/Relu_grad/ReluGrad"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "model/encoder/block_1/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "model/encoder/block_1/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/AddN_9"
  input: "model/encoder/block_1/batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "model/encoder/block_1/batch_normalization/batchnorm/Rsqrt"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "model/encoder/block_1/batch_normalization/moments/variance/reduction_indices"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/add"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range/start"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Size"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/range"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/mod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_1/batch_normalization/moments/SquaredDifference"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_2"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Shape_3"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Prod_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Tile"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "model/encoder/block_1/batch_normalization/moments/StopGradient"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/variance_grad/truediv"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "model/encoder/block_1/batch_normalization/moments/mean/reduction_indices"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/add"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range/start"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Size"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/range"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/mod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Reshape"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "model/encoder/block_1/conv1d/BiasAdd"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_3"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Prod"
  op: "Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_2"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Const_1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Shape_3"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum_1/y"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Prod_1"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Prod"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Cast"
  op: "Cast"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Tile"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_1/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_10"
  input: "^gradients/model/encoder/block_1/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_10"
  input: "^gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/conv1d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Squeeze_grad/Shape"
  op: "Shape"
  input: "model/encoder/block_1/conv1d/conv1d/Conv2D"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/control_dependency"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/ShapeN"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims_1"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "model/encoder/block_1/conv1d/conv1d/ExpandDims"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/ShapeN:1"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 98
          }
          dim {
            size: 40
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/ExpandDims_1_grad/Shape"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000(\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/model/encoder/block_1/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/Conv2D_grad/tuple/control_dependency_1"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/ExpandDims_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 40
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  input: "model/encoder/block_1/conv1d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 40
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/kernel/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  input: "model/encoder/block_1/conv1d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  input: "model/encoder/block_1/conv1d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/conv1d/bias/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  input: "model/encoder/block_1/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_1/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  input: "model/encoder/block_2/conv1d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/kernel/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  input: "model/encoder/block_2/conv1d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  input: "model/encoder/block_2/conv1d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/conv1d/bias/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  input: "model/encoder/block_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_2/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  input: "model/encoder/block_3/conv1d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 5
        }
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/kernel/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  input: "model/encoder/block_3/conv1d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  input: "model/encoder/block_3/conv1d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/conv1d/bias/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  input: "model/encoder/block_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/block_3/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam/Assign"
  op: "Assign"
  input: "model/encoder/attention/hidden/Adam"
  input: "model/encoder/attention/hidden/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam/read"
  op: "Identity"
  input: "model/encoder/attention/hidden/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/attention/hidden/Adam_1"
  input: "model/encoder/attention/hidden/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/attention/hidden/Adam_1/read"
  op: "Identity"
  input: "model/encoder/attention/hidden/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  input: "model/encoder/output_transformer/dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/kernel/Adam_1/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  input: "model/encoder/output_transformer/dense/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam_1/Assign"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  input: "model/encoder/output_transformer/dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "model/encoder/output_transformer/dense/bias/Adam_1/read"
  op: "Identity"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_1/conv1d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_1/conv1d/kernel"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_1/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_1/conv1d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_1/conv1d/bias"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_1/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_1/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_1/batch_normalization/gamma"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_1/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_1/batch_normalization/beta"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_2/conv1d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_2/conv1d/kernel"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_2/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_2/conv1d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_2/conv1d/bias"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_2/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_2/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_2/batch_normalization/gamma"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_2/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_2/batch_normalization/beta"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_3/conv1d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_3/conv1d/kernel"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_3/conv1d/conv1d/ExpandDims_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_3/conv1d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_3/conv1d/bias"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_3/conv1d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_3/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_3/batch_normalization/gamma"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/block_3/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/block_3/batch_normalization/beta"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/block_3/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/attention/hidden/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/attention/hidden"
  input: "model/encoder/attention/hidden/Adam"
  input: "model/encoder/attention/hidden/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/output_transformer/dense/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/output_transformer/dense/kernel"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/output_transformer/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_model/encoder/output_transformer/dense/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "model/encoder/output_transformer/dense/bias"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/model/encoder/output_transformer/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_model/encoder/attention/hidden/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_model/encoder/attention/hidden/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_model/encoder/attention/hidden/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_1/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_2/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/beta/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/batch_normalization/gamma/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/block_3/conv1d/kernel/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/bias/ApplyAdam"
  input: "^Adam/update_model/encoder/output_transformer/dense/kernel/ApplyAdam"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_1/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_2/batch_normalization/AssignMovingAvg_1"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg"
  input: "^model/encoder/block_3/batch_normalization/AssignMovingAvg_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "global_step"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global_step/Assign"
  input: "^model/encoder/attention/hidden/Adam/Assign"
  input: "^model/encoder/attention/hidden/Adam_1/Assign"
  input: "^model/encoder/attention/hidden/Assign"
  input: "^model/encoder/block_1/batch_normalization/beta/Adam/Assign"
  input: "^model/encoder/block_1/batch_normalization/beta/Adam_1/Assign"
  input: "^model/encoder/block_1/batch_normalization/beta/Assign"
  input: "^model/encoder/block_1/batch_normalization/gamma/Adam/Assign"
  input: "^model/encoder/block_1/batch_normalization/gamma/Adam_1/Assign"
  input: "^model/encoder/block_1/batch_normalization/gamma/Assign"
  input: "^model/encoder/block_1/batch_normalization/moving_mean/Assign"
  input: "^model/encoder/block_1/batch_normalization/moving_variance/Assign"
  input: "^model/encoder/block_1/conv1d/bias/Adam/Assign"
  input: "^model/encoder/block_1/conv1d/bias/Adam_1/Assign"
  input: "^model/encoder/block_1/conv1d/bias/Assign"
  input: "^model/encoder/block_1/conv1d/kernel/Adam/Assign"
  input: "^model/encoder/block_1/conv1d/kernel/Adam_1/Assign"
  input: "^model/encoder/block_1/conv1d/kernel/Assign"
  input: "^model/encoder/block_2/batch_normalization/beta/Adam/Assign"
  input: "^model/encoder/block_2/batch_normalization/beta/Adam_1/Assign"
  input: "^model/encoder/block_2/batch_normalization/beta/Assign"
  input: "^model/encoder/block_2/batch_normalization/gamma/Adam/Assign"
  input: "^model/encoder/block_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^model/encoder/block_2/batch_normalization/gamma/Assign"
  input: "^model/encoder/block_2/batch_normalization/moving_mean/Assign"
  input: "^model/encoder/block_2/batch_normalization/moving_variance/Assign"
  input: "^model/encoder/block_2/conv1d/bias/Adam/Assign"
  input: "^model/encoder/block_2/conv1d/bias/Adam_1/Assign"
  input: "^model/encoder/block_2/conv1d/bias/Assign"
  input: "^model/encoder/block_2/conv1d/kernel/Adam/Assign"
  input: "^model/encoder/block_2/conv1d/kernel/Adam_1/Assign"
  input: "^model/encoder/block_2/conv1d/kernel/Assign"
  input: "^model/encoder/block_3/batch_normalization/beta/Adam/Assign"
  input: "^model/encoder/block_3/batch_normalization/beta/Adam_1/Assign"
  input: "^model/encoder/block_3/batch_normalization/beta/Assign"
  input: "^model/encoder/block_3/batch_normalization/gamma/Adam/Assign"
  input: "^model/encoder/block_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^model/encoder/block_3/batch_normalization/gamma/Assign"
  input: "^model/encoder/block_3/batch_normalization/moving_mean/Assign"
  input: "^model/encoder/block_3/batch_normalization/moving_variance/Assign"
  input: "^model/encoder/block_3/conv1d/bias/Adam/Assign"
  input: "^model/encoder/block_3/conv1d/bias/Adam_1/Assign"
  input: "^model/encoder/block_3/conv1d/bias/Assign"
  input: "^model/encoder/block_3/conv1d/kernel/Adam/Assign"
  input: "^model/encoder/block_3/conv1d/kernel/Adam_1/Assign"
  input: "^model/encoder/block_3/conv1d/kernel/Assign"
  input: "^model/encoder/output_transformer/dense/bias/Adam/Assign"
  input: "^model/encoder/output_transformer/dense/bias/Adam_1/Assign"
  input: "^model/encoder/output_transformer/dense/bias/Assign"
  input: "^model/encoder/output_transformer/dense/kernel/Adam/Assign"
  input: "^model/encoder/output_transformer/dense/kernel/Adam_1/Assign"
  input: "^model/encoder/output_transformer/dense/kernel/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "metrics/mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "metrics/mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 56
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 56
          }
        }
        string_val: "global_step"
        string_val: "model/encoder/block_1/conv1d/kernel"
        string_val: "model/encoder/block_1/conv1d/bias"
        string_val: "model/encoder/block_1/batch_normalization/gamma"
        string_val: "model/encoder/block_1/batch_normalization/beta"
        string_val: "model/encoder/block_1/batch_normalization/moving_mean"
        string_val: "model/encoder/block_1/batch_normalization/moving_variance"
        string_val: "model/encoder/block_2/conv1d/kernel"
        string_val: "model/encoder/block_2/conv1d/bias"
        string_val: "model/encoder/block_2/batch_normalization/gamma"
        string_val: "model/encoder/block_2/batch_normalization/beta"
        string_val: "model/encoder/block_2/batch_normalization/moving_mean"
        string_val: "model/encoder/block_2/batch_normalization/moving_variance"
        string_val: "model/encoder/block_3/conv1d/kernel"
        string_val: "model/encoder/block_3/conv1d/bias"
        string_val: "model/encoder/block_3/batch_normalization/gamma"
        string_val: "model/encoder/block_3/batch_normalization/beta"
        string_val: "model/encoder/block_3/batch_normalization/moving_mean"
        string_val: "model/encoder/block_3/batch_normalization/moving_variance"
        string_val: "model/encoder/attention/hidden"
        string_val: "model/encoder/output_transformer/dense/kernel"
        string_val: "model/encoder/output_transformer/dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_1/conv1d/bias/Adam"
        string_val: "model/encoder/block_1/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_2/conv1d/bias/Adam"
        string_val: "model/encoder/block_2/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_3/conv1d/bias/Adam"
        string_val: "model/encoder/block_3/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/attention/hidden/Adam"
        string_val: "model/encoder/attention/hidden/Adam_1"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam_1"
        string_val: "model/encoder/output_transformer/dense/bias/Adam"
        string_val: "model/encoder/output_transformer/dense/bias/Adam_1"
        string_val: "metrics/mean/total"
        string_val: "metrics/mean/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 56
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 56
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 56
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "model/encoder/attention/hidden/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 54
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 54
          }
        }
        string_val: "global_step"
        string_val: "model/encoder/block_1/conv1d/kernel"
        string_val: "model/encoder/block_1/conv1d/bias"
        string_val: "model/encoder/block_1/batch_normalization/gamma"
        string_val: "model/encoder/block_1/batch_normalization/beta"
        string_val: "model/encoder/block_1/batch_normalization/moving_mean"
        string_val: "model/encoder/block_1/batch_normalization/moving_variance"
        string_val: "model/encoder/block_2/conv1d/kernel"
        string_val: "model/encoder/block_2/conv1d/bias"
        string_val: "model/encoder/block_2/batch_normalization/gamma"
        string_val: "model/encoder/block_2/batch_normalization/beta"
        string_val: "model/encoder/block_2/batch_normalization/moving_mean"
        string_val: "model/encoder/block_2/batch_normalization/moving_variance"
        string_val: "model/encoder/block_3/conv1d/kernel"
        string_val: "model/encoder/block_3/conv1d/bias"
        string_val: "model/encoder/block_3/batch_normalization/gamma"
        string_val: "model/encoder/block_3/batch_normalization/beta"
        string_val: "model/encoder/block_3/batch_normalization/moving_mean"
        string_val: "model/encoder/block_3/batch_normalization/moving_variance"
        string_val: "model/encoder/attention/hidden"
        string_val: "model/encoder/output_transformer/dense/kernel"
        string_val: "model/encoder/output_transformer/dense/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_1/conv1d/bias/Adam"
        string_val: "model/encoder/block_1/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_2/conv1d/bias/Adam"
        string_val: "model/encoder/block_2/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_3/conv1d/bias/Adam"
        string_val: "model/encoder/block_3/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/attention/hidden/Adam"
        string_val: "model/encoder/attention/hidden/Adam_1"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam_1"
        string_val: "model/encoder/output_transformer/dense/bias/Adam"
        string_val: "model/encoder/output_transformer/dense/bias/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 54
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 54
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 54
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^metrics/mean/count/Assign"
  input: "^metrics/mean/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "embedding_mean_norm"
  input: "hardest_positive_dist"
  input: "hardest_negative_dist"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_6b18e97b67ac4a25bdde7b40798bac0e/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 54
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "model/encoder/attention/hidden"
        string_val: "model/encoder/attention/hidden/Adam"
        string_val: "model/encoder/attention/hidden/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/beta"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/gamma"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/moving_mean"
        string_val: "model/encoder/block_1/batch_normalization/moving_variance"
        string_val: "model/encoder/block_1/conv1d/bias"
        string_val: "model/encoder/block_1/conv1d/bias/Adam"
        string_val: "model/encoder/block_1/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_1/conv1d/kernel"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/beta"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/gamma"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/moving_mean"
        string_val: "model/encoder/block_2/batch_normalization/moving_variance"
        string_val: "model/encoder/block_2/conv1d/bias"
        string_val: "model/encoder/block_2/conv1d/bias/Adam"
        string_val: "model/encoder/block_2/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_2/conv1d/kernel"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/beta"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/gamma"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/moving_mean"
        string_val: "model/encoder/block_3/batch_normalization/moving_variance"
        string_val: "model/encoder/block_3/conv1d/bias"
        string_val: "model/encoder/block_3/conv1d/bias/Adam"
        string_val: "model/encoder/block_3/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_3/conv1d/kernel"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam_1"
        string_val: "model/encoder/output_transformer/dense/bias"
        string_val: "model/encoder/output_transformer/dense/bias/Adam"
        string_val: "model/encoder/output_transformer/dense/bias/Adam_1"
        string_val: "model/encoder/output_transformer/dense/kernel"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 54
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power"
  input: "beta2_power"
  input: "global_step"
  input: "model/encoder/attention/hidden"
  input: "model/encoder/attention/hidden/Adam"
  input: "model/encoder/attention/hidden/Adam_1"
  input: "model/encoder/block_1/batch_normalization/beta"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_1/batch_normalization/gamma"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  input: "model/encoder/block_1/conv1d/bias"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  input: "model/encoder/block_1/conv1d/kernel"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  input: "model/encoder/block_2/batch_normalization/beta"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_2/batch_normalization/gamma"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  input: "model/encoder/block_2/conv1d/bias"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  input: "model/encoder/block_2/conv1d/kernel"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  input: "model/encoder/block_3/batch_normalization/beta"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  input: "model/encoder/block_3/batch_normalization/gamma"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  input: "model/encoder/block_3/conv1d/bias"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  input: "model/encoder/block_3/conv1d/kernel"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  input: "model/encoder/output_transformer/dense/bias"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  input: "model/encoder/output_transformer/dense/kernel"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 54
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "model/encoder/attention/hidden"
        string_val: "model/encoder/attention/hidden/Adam"
        string_val: "model/encoder/attention/hidden/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/beta"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_1/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/gamma"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_1/batch_normalization/moving_mean"
        string_val: "model/encoder/block_1/batch_normalization/moving_variance"
        string_val: "model/encoder/block_1/conv1d/bias"
        string_val: "model/encoder/block_1/conv1d/bias/Adam"
        string_val: "model/encoder/block_1/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_1/conv1d/kernel"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam"
        string_val: "model/encoder/block_1/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/beta"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_2/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/gamma"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_2/batch_normalization/moving_mean"
        string_val: "model/encoder/block_2/batch_normalization/moving_variance"
        string_val: "model/encoder/block_2/conv1d/bias"
        string_val: "model/encoder/block_2/conv1d/bias/Adam"
        string_val: "model/encoder/block_2/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_2/conv1d/kernel"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam"
        string_val: "model/encoder/block_2/conv1d/kernel/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/beta"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam"
        string_val: "model/encoder/block_3/batch_normalization/beta/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/gamma"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam"
        string_val: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
        string_val: "model/encoder/block_3/batch_normalization/moving_mean"
        string_val: "model/encoder/block_3/batch_normalization/moving_variance"
        string_val: "model/encoder/block_3/conv1d/bias"
        string_val: "model/encoder/block_3/conv1d/bias/Adam"
        string_val: "model/encoder/block_3/conv1d/bias/Adam_1"
        string_val: "model/encoder/block_3/conv1d/kernel"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam"
        string_val: "model/encoder/block_3/conv1d/kernel/Adam_1"
        string_val: "model/encoder/output_transformer/dense/bias"
        string_val: "model/encoder/output_transformer/dense/bias/Adam"
        string_val: "model/encoder/output_transformer/dense/bias/Adam_1"
        string_val: "model/encoder/output_transformer/dense/kernel"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam"
        string_val: "model/encoder/output_transformer/dense/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 54
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 54
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "model/encoder/attention/hidden"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "model/encoder/attention/hidden/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "model/encoder/attention/hidden/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/attention/hidden"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/moving_mean"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "model/encoder/block_1/batch_normalization/moving_variance"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/bias/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "model/encoder/block_1/conv1d/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_1/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 40
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/moving_mean"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "model/encoder/block_2/batch_normalization/moving_variance"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias/Adam"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/bias/Adam_1"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel/Adam"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "model/encoder/block_2/conv1d/kernel/Adam_1"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_2/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta/Adam"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/moving_mean"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "model/encoder/block_3/batch_normalization/moving_variance"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias/Adam"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/bias/Adam_1"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel/Adam"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "model/encoder/block_3/conv1d/kernel/Adam_1"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/block_3/conv1d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias/Adam"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/bias/Adam_1"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel/Adam"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "model/encoder/output_transformer/dense/kernel/Adam_1"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@model/encoder/output_transformer/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "tf_data_structured_function_wrapper_XLxOjQQ4fxs"
      input_arg {
        name: "arg0"
        type: DT_STRING
      }
      input_arg {
        name: "arg1_0"
        type: DT_INT32
      }
      output_arg {
        name: "squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "arg1"
        type: DT_INT32
      }
      description: "Wrapper for passing nested structures to and from tf.data functions."
    }
    node_def {
      name: "ReadFile"
      op: "ReadFile"
      input: "arg0"
      device: "/device:CPU:0"
    }
    node_def {
      name: "DecodeWav"
      op: "DecodeWav"
      input: "ReadFile:contents:0"
      device: "/device:CPU:0"
      attr {
        key: "desired_channels"
        value {
          i: 1
        }
      }
      attr {
        key: "desired_samples"
        value {
          i: 16000
        }
      }
    }
    node_def {
      name: "AudioSpectrogram"
      op: "AudioSpectrogram"
      input: "DecodeWav:audio:0"
      device: "/device:CPU:0"
      attr {
        key: "magnitude_squared"
        value {
          b: true
        }
      }
      attr {
        key: "stride"
        value {
          i: 160
        }
      }
      attr {
        key: "window_size"
        value {
          i: 480
        }
      }
    }
    node_def {
      name: "Mfcc"
      op: "Mfcc"
      input: "AudioSpectrogram:spectrogram:0"
      input: "DecodeWav:sample_rate:0"
      device: "/device:CPU:0"
      attr {
        key: "dct_coefficient_count"
        value {
          i: 40
        }
      }
      attr {
        key: "filterbank_channel_count"
        value {
          i: 40
        }
      }
      attr {
        key: "lower_frequency_limit"
        value {
          f: 20.0
        }
      }
      attr {
        key: "upper_frequency_limit"
        value {
          f: 4000.0
        }
      }
    }
    node_def {
      name: "Squeeze"
      op: "Squeeze"
      input: "Mfcc:output:0"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
          }
        }
      }
    }
    ret {
      key: "arg1"
      value: "arg1_0"
    }
    ret {
      key: "squeeze"
      value: "Squeeze:output:0"
    }
  }
  function {
    signature {
      name: "_make_dataset_YFkPxI1OsjA"
      output_arg {
        name: "batchdatasetv2"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 105
              }
            }
            string_val: "./data\\train\\10043504830011533633946092-0.wav"
            string_val: "./data\\train\\10043504830011533633946092-1.wav"
            string_val: "./data\\train\\10043504830011533633946092-2.wav"
            string_val: "./data\\train\\10043504830021533697756254-0.wav"
            string_val: "./data\\train\\10043504830021533697756254-1.wav"
            string_val: "./data\\train\\10043504830021533697756254-2.wav"
            string_val: "./data\\train\\10043504830031533635708232-0.wav"
            string_val: "./data\\train\\10043504830031533635708232-1.wav"
            string_val: "./data\\train\\10043504830031533635708232-2.wav"
            string_val: "./data\\train\\10043504830041533637119357-0.wav"
            string_val: "./data\\train\\10043504830041533637119357-1.wav"
            string_val: "./data\\train\\10043504830041533637119357-2.wav"
            string_val: "./data\\train\\10043504830051533697896189-0.wav"
            string_val: "./data\\train\\10043504830051533697896189-1.wav"
            string_val: "./data\\train\\10043504830051533697896189-2.wav"
            string_val: "./data\\train\\10043504830081533698237085-0.wav"
            string_val: "./data\\train\\10043504830081533698237085-1.wav"
            string_val: "./data\\train\\10043504830081533698237085-2.wav"
            string_val: "./data\\train\\10043504830081533785276331-0.wav"
            string_val: "./data\\train\\10043504830081533785276331-1.wav"
            string_val: "./data\\train\\10043504830081533785276331-2.wav"
            string_val: "./data\\train\\10043504830091533698082093-0.wav"
            string_val: "./data\\train\\10043504830091533698082093-1.wav"
            string_val: "./data\\train\\10043504830091533698082093-2.wav"
            string_val: "./data\\train\\10043524311341533542754847-0.wav"
            string_val: "./data\\train\\10043524311341533542754847-1.wav"
            string_val: "./data\\train\\10043524311341533542754847-2.wav"
            string_val: "./data\\train\\10043524311371533542446162-0.wav"
            string_val: "./data\\train\\10043524311371533542446162-1.wav"
            string_val: "./data\\train\\10043524311371533542446162-2.wav"
            string_val: "./data\\train\\10043524311441533544717976-0.wav"
            string_val: "./data\\train\\10043524311441533544717976-1.wav"
            string_val: "./data\\train\\10043524311441533544717976-2.wav"
            string_val: "./data\\train\\121624931534904112937-0.wav"
            string_val: "./data\\train\\121624931534904112937-1.wav"
            string_val: "./data\\train\\121624931534904112937-2.wav"
            string_val: "./data\\train\\121624961534918358067-0.wav"
            string_val: "./data\\train\\121624961534918358067-1.wav"
            string_val: "./data\\train\\121624961534918358067-2.wav"
            string_val: "./data\\train\\141280011535681514293-0.wav"
            string_val: "./data\\train\\141280011535681514293-1.wav"
            string_val: "./data\\train\\141280011535681514293-2.wav"
            string_val: "./data\\train\\141280011535682173218-0.wav"
            string_val: "./data\\train\\141280011535682173218-1.wav"
            string_val: "./data\\train\\141280011535682173218-2.wav"
            string_val: "./data\\train\\141280021535682706063-0.wav"
            string_val: "./data\\train\\141280021535682706063-1.wav"
            string_val: "./data\\train\\141280021535682706063-2.wav"
            string_val: "./data\\train\\141280021535683539543-0.wav"
            string_val: "./data\\train\\141280021535683539543-1.wav"
            string_val: "./data\\train\\141280021535683539543-2.wav"
            string_val: "./data\\train\\141280031535681842181-0.wav"
            string_val: "./data\\train\\141280031535681842181-1.wav"
            string_val: "./data\\train\\141280031535681842181-2.wav"
            string_val: "./data\\train\\142504821535081177750-0.wav"
            string_val: "./data\\train\\142504821535081177750-1.wav"
            string_val: "./data\\train\\142504821535081177750-2.wav"
            string_val: "./data\\train\\142546811535006188038-0.wav"
            string_val: "./data\\train\\142546811535006188038-1.wav"
            string_val: "./data\\train\\142546811535006188038-2.wav"
            string_val: "./data\\train\\142546821535011943981-0.wav"
            string_val: "./data\\train\\142546821535011943981-1.wav"
            string_val: "./data\\train\\142546821535011943981-2.wav"
            string_val: "./data\\train\\142633511535006393316-0.wav"
            string_val: "./data\\train\\142633511535006393316-1.wav"
            string_val: "./data\\train\\142633511535006393316-2.wav"
            string_val: "./data\\train\\142633531534826683522-0.wav"
            string_val: "./data\\train\\142633531534826683522-1.wav"
            string_val: "./data\\train\\142633531534826683522-2.wav"
            string_val: "./data\\train\\142633541535013374992-0.wav"
            string_val: "./data\\train\\142633541535013374992-1.wav"
            string_val: "./data\\train\\142633541535013374992-2.wav"
            string_val: "./data\\train\\142633581534822791380-0.wav"
            string_val: "./data\\train\\142633581534822791380-1.wav"
            string_val: "./data\\train\\142633581534822791380-2.wav"
            string_val: "./data\\train\\142722411535099445220-0.wav"
            string_val: "./data\\train\\142722411535099445220-1.wav"
            string_val: "./data\\train\\142722411535099445220-2.wav"
            string_val: "./data\\train\\142722411535103106782-0.wav"
            string_val: "./data\\train\\142722411535103106782-1.wav"
            string_val: "./data\\train\\142722411535103106782-2.wav"
            string_val: "./data\\train\\142722411535104500887-0.wav"
            string_val: "./data\\train\\142722411535104500887-1.wav"
            string_val: "./data\\train\\142722411535104500887-2.wav"
            string_val: "./data\\train\\142722441535100329154-0.wav"
            string_val: "./data\\train\\142722441535100329154-1.wav"
            string_val: "./data\\train\\142722441535100329154-2.wav"
            string_val: "./data\\train\\142722481535102393907-0.wav"
            string_val: "./data\\train\\142722481535102393907-1.wav"
            string_val: "./data\\train\\142722481535102393907-2.wav"
            string_val: "./data\\train\\142722491535105193603-0.wav"
            string_val: "./data\\train\\142722491535105193603-1.wav"
            string_val: "./data\\train\\142722491535105193603-2.wav"
            string_val: "./data\\train\\143026681535682204227-0.wav"
            string_val: "./data\\train\\143026681535682204227-1.wav"
            string_val: "./data\\train\\143026681535682204227-2.wav"
            string_val: "./data\\train\\143311731535167505926-0.wav"
            string_val: "./data\\train\\143311731535167505926-1.wav"
            string_val: "./data\\train\\143311731535167505926-2.wav"
            string_val: "./data\\train\\143311741535167045712-0.wav"
            string_val: "./data\\train\\143311741535167045712-1.wav"
            string_val: "./data\\train\\143311741535167045712-2.wav"
            string_val: "./data\\train\\143730491535534499818-0.wav"
            string_val: "./data\\train\\143730491535534499818-1.wav"
            string_val: "./data\\train\\143730491535534499818-2.wav"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 105
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\002\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\005\000\000\000\005\000\000\000\006\000\000\000\006\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\t\000\000\000\t\000\000\000\t\000\000\000\n\000\000\000\n\000\000\000\n\000\000\000\013\000\000\000\013\000\000\000\013\000\000\000\014\000\000\000\014\000\000\000\014\000\000\000\r\000\000\000\r\000\000\000\r
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      device: "/device:CPU:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "TensorSliceDataset:handle:0"
      device: "/device:CPU:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_data_structured_function_wrapper_XLxOjQQ4fxs"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 98
              }
              dim {
                size: 40
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "MapDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 98
              }
              dim {
                size: 40
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "ShuffleDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 98
              }
              dim {
                size: 40
              }
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/batch_size"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 10
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2/drop_remainder"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node_def {
      name: "BatchDatasetV2"
      op: "BatchDatasetV2"
      input: "RepeatDataset:handle:0"
      input: "BatchDatasetV2/batch_size:output:0"
      input: "BatchDatasetV2/drop_remainder:output:0"
      device: "/device:CPU:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 98
              }
              dim {
                size: 40
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_FLOAT
            type: DT_INT32
          }
        }
      }
    }
    ret {
      key: "batchdatasetv2"
      value: "BatchDatasetV2:handle:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
